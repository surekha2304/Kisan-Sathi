# -*- coding: utf-8 -*-
"""crop_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LpEQL8hmXZzfPJ0VWkcUKGZ0-Q7h5tk1
"""

import numpy as np
import pandas as pd

df = pd.read_csv("Crop_recommendation.csv")
df.head()

df.info()

df['label'].unique()

from sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
df['label_en'] = encoder.fit_transform(df['label'])
labels_lis = sorted(df['label'].unique())
labels_dic = {}
df.drop('label',axis='columns',inplace=True)
for i,val in enumerate(labels_lis):
    labels_dic.update({i:val})
labels_dic

X = df.drop('label_en',axis=1)
y = df['label_en']

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
# from sklearn.linear_model import LogisticRegression
# from sklearn.tree import DecisionTreeClassifier
import warnings
warnings.filterwarnings('ignore')

def best_params(cv_df):
    """returns best score parameters"""
    best_test_score = cv_df[cv_df['mean_test_score']==cv_df['mean_test_score'].max()]
    best_test_train_score = best_test_score[best_test_score['mean_train_score']==best_test_score['mean_train_score'].max()]
    return best_test_train_score['params'].values

svm_cv = GridSearchCV(SVC(),param_grid={
    'C':[0.1,1,10],
    'kernel':['rbf','poly'],
},return_train_score=True)
svm_cv.fit(X,y)

svc_grid = pd.DataFrame(svm_cv.cv_results_)
svc_paras = best_params(svc_grid)
svc_paras

rf_cv = GridSearchCV(RandomForestClassifier(),param_grid={
    'max_depth': [None, 5, 10],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
},return_train_score=True)
rf_cv.fit(X,y)

rf_grid = pd.DataFrame(rf_cv.cv_results_)
rf_paras = best_params(rf_grid)
rf_paras

# def score(model,X,y):
#     result = cross_val_score(model,X,y)
#     return result,sum(result)/len(result)
# models = [RandomForestClassifier(max_depth=10, min_samples_leaf=1, min_samples_split=2)]
# print(models,score(models,X,y))

X_train, X_test, y_train, y_test = train_test_split(X,y,stratify=y)
X_train.shape,y_test.shape

model = RandomForestClassifier(max_depth=10, min_samples_leaf=1, min_samples_split=2)
model.fit(X_train,y_train)
model.score(X_train,y_train),model.score(X_test,y_test)

import joblib
joblib.dump(model,"crop recommendation")

# trained_model = joblib.load("crop recommendation")